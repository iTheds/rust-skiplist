
/*!
 * 跳表
 * 跳表全称为跳跃列表，它允许快速查询，插入和删除一个有序连续元素的数据链表。跳跃列表的平均查找和插入时间复杂度都是O(logn)
 * 跳表插入、删除、查找元素的时间复杂度跟红黑树都是一样量级的，时间复杂度都是O(logn)
 * 
 * 跳表的优点：
 * 跳表实现起来相对简单。红黑树的定义和左旋右旋操作，确实复杂.
 * 区间查找方便。在跳表中找到一个节点后，就可以通过前后指针找到相邻的元素。红黑树则需要通过父节点，子节点去寻找，相对麻烦。
 * 
 * 红黑树的优点
 * 内存占用小，只需要3个指针就可以（左子树，右子树，父节点） 而跳表有一个向后的指针，每一层都有一个向前的指针
 * 红黑树的查找稳定，红黑树有着严格的定义，每次插入和删除数据都会通过左旋右旋来平衡树的结构，通过红黑树查找有着稳定的查找时间O(logn)
 * 跳表和普通链表相比，除了费内存，好像没啥缺点了
 * 
 * 使用场景，核验依据：
 * 
 * 
 */ 

 //外部引用
 extern crate rand;
 //外模块
 pub mod level_generator;
 pub mod ordered_skiplist;
 pub mod skiplist;
 pub mod skipmap;
 //内部模块
 mod skipnode;
 
 //对外mod
 pub use crate::skiplist::skiplist::SkipList;
 pub use crate::skiplist::skipmap::SkipMap;
//  pub use crate::ordered_skiplist::OrderedSkipList; // 额外的排序跳表 mod 

// ////////////////////////////////////////////////////////////////////////////
// Tests
// ////////////////////////////////////////////////////////////////////////////
#[cfg(test)]
mod tests {

    #[test]
    fn test(){
    }
}
